

## Описание проекта

Система автоматизации деятельности Аквапарка должна предоставлять удобный интерфейс для управления всеми процессами, связанными с работой аквапарка, включая продажу билетов, заказ еды и напитков, управление аттракционами и персоналом, а также генерацию отчетов.

## Таблицы и связи между ними

### Таблица `users`

Хранит информацию о пользователях системы.

| Поле           | Тип данных | Описание                           |
| -------------- | ---------- | ----------------------------------|
| id             | INTEGER    | Уникальный идентификатор пользователя |
| name           | VARCHAR(50)  | Имя пользователя                  |
| email          | VARCHAR(50)  | Адрес электронной почты пользователя |
| password       | VARCHAR(50)  | Хэш пароля пользователя           |
| role_id        | INTEGER    | Идентификатор роли пользователя (администратор, менеджер, кассир, клиент) |

### Таблица `roles`

Хранит информацию о ролях пользователей.

| Поле           | Тип данных | Описание                           |
| -------------- | ---------- | ----------------------------------|
| id             | INTEGER    | Уникальный идентификатор роли      |
| name           | VARCHAR(50)  | Название роли                      |

### Таблица `attractions`

Хранит информацию об аттракционах аквапарка.

| Поле           | Тип данных | Описание                           |
| -------------- | ---------- | ----------------------------------|
| id             | INTEGER    | Уникальный идентификатор аттракциона |
| name           | VARCHAR(50)  | Название аттракциона               |
| description    | TEXT       | Описание аттракциона               |
| min_age        | INTEGER    | Минимальный возраст для посетителей |
| max_weight     | INTEGER    | Максимальный вес посетителей      |
| status_id      | INTEGER    | Идентификатор статуса аттракциона (работает, ремонт, закрыт) |
| category_id    | INTEGER    | Идентификатор категории аттракциона |

### Таблица `attraction_categories`

Хранит информацию о категориях аттракционов.

| Поле           | Тип данных | Описание                           |
| -------------- | ---------- | ----------------------------------|
| id             | INTEGER    | Уникальный идентификатор категории |
| name           | VARCHAR(50)  | Название категории                 |


### Таблица `orders`

Хранит информацию о заказах клиентов.

| Поле           | Тип данных | Описание                           |
| -------------- | ---------- | ----------------------------------|
| id             | INTEGER    | Уникальный идентификатор заказа    |
| user_id        | INTEGER    | Идентификатор клиента, оформившего заказ |
| attraction_id  | INTEGER    | Идентификатор аттракциона, на котором произведен заказ |
| food_order_id  | INTEGER    | Идентификатор заказа еды и напитков |
| status_id      | INTEGER    | Идентификатор статуса заказа (новый, подтвержден, выполнен, отменен) |
| created_at     | TIMESTAMP  | Дата и время создания заказа      |
| updated_at     | TIMESTAMP  | Дата и время последнего обновления заказа |

### Таблица `food_orders`

Хранит информацию о заказах еды и напитков.

| Поле           | Тип данных | Описание                           |
| -------------- | ---------- | ----------------------------------|
| id             | INTEGER    | Уникальный идентификатор заказа еды и напитков |
| user_id        | INTEGER    | Идентификатор клиента, оформившего заказ |
| items          | TEXT       | Список блюд и напитков в заказе    |
| created_at     | TIMESTAMP  | Дата и время создания заказа      |
| updated_at     | TIMESTAMP  | Дата и время последнего обновления заказа |

### Связи между таблицами

Таблица `users` связана с таблицей `roles` через поле `role_id`.
Таблица `attractions` связана с таблицей `attraction_categories` через поле `category_id`.
Таблица `orders` связана с таблицами `users` и `attractions` через поля `user_id` и `attraction_id`.
Таблица `orders` связана с таблицей `food_orders` через поле `food_order_id`.

## Примеры типовых операций

### Создание пользователя

```sql
INSERT INTO users (name, email, password, role_id) VALUES ('John Doe', 'johndoe@example.com', 'hash123', 4);
```

### Обновление статуса аттракциона

```sql
UPDATE attractions SET status_id = 3 WHERE id = 1;
```

### Создание заказа

```sql
INSERT INTO orders (user_id, attraction_id, food_order_id, status_id, created_at, updated_at)
VALUES (1, 2, 1, 1, NOW(), NOW());
```

### Удаление пользователя

```sql
DELETE FROM users WHERE id = 1;
```

### Изменение статуса заказа

```sql
UPDATE orders SET status_id = 2 WHERE id = 1;
```

### Запрос списка всех аттракционов

```sql
SELECT * FROM attractions;
```

### Запрос списка заказов со статусом "подтвержден"

```sql
SELECT * FROM orders WHERE status_id = 2;
```

## Заключение

В результате проектирования были созданы четыре таблицы: `users`, `roles`, `attractions`, `food_orders`, а также определены связи между ними. Все таблицы заполнены типовыми данными и созданы SQL-запрос